---
AWSTemplateFormatVersion: 2010-09-09
Description: Pipeline to deploy microservice to ecs with a security scan step before deployment

Parameters:
  LZStackPrefix:
    Description: Prefix to find values from landing zone
    Type: String
  GitHubUser:
    Description: 'GitHub UserName'
    Type: 'String'
  GitRepo:
    Description: 'URL for Git repo'
    Type: 'String'
  GitBranch:
    Description: 'Branch being deployed'
    Type: 'String'
  GitHubToken:
    Description: 'OAuth Token for repo access'
    Type: 'String'
    NoEcho: true
  ListenerPriority:
    Description: 'Priority in ALB'
    Type: Number
  ListenerPath:
    Description: 'Path on which Microservice is deployed'
    Type: 'String'
  ServiceName: # GitHubUser/GitRepo may have capital letters, need to send separately
    Description: 'Name of the service'
    Type: 'String'

Resources:
  PipelineIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [codepipeline.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: !Sub ${LZStackPrefix}-service-pipeline # Dynamic
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 's3:*'
                - 'codebuild:*'
                - 'cloudformation:CreateStack'
                - 'cloudformation:DescribeStacks'
                - 'cloudformation:DeleteStack'
                - 'cloudformation:UpdateStack'
                - 'cloudformation:CreateChangeSet'
                - 'cloudformation:ExecuteChangeSet'
                - 'cloudformation:DeleteChangeSet'
                - 'cloudformation:DescribeChangeSet'
                - 'cloudformation:SetStackPolicy'
                - 'iam:PassRole'
                - 'sns:Publish'
                 # 'codecommit:BatchGetRepositories'
                 #  - 'codecommit:Get*'
                 #  - 'codecommit:GitPull'
                 #  - 'codecommit:List*'
                 #  - 'codecommit:Update*'
                 #  - 'codecommit:Test*'
                 #  - 'codecommit:UploadArchive'
                Effect: Allow
                Resource: '*'
  CustomBuildIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: 'codebuild.amazonaws.com'
      Path: /
      ManagedPolicyArns:
        - !Ref CodeBuildStandardPolicy
        - !Ref UserTaskIamPolicy
  UserTaskIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: 'ecs-tasks.amazonaws.com'
      Path: /
      ManagedPolicyArns:
        - !Ref UserTaskIamPolicy

  AnchoreTestIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: 'codebuild.amazonaws.com'
      Path: /
      ManagedPolicyArns:
        - !Ref CodeBuildStandardPolicy
        - !Ref UserTaskIamPolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Policies:
        -
          PolicyName: S3SSMAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Sid: AccessTemplateBucket
              Effect: Allow
              Action:
                - s3:GetObject
              Resource:
                - !Sub
                  - 'arn:aws:s3:::${TEMPLATES_BUCKET}/*'
                  -
                    TEMPLATES_BUCKET:
                      Fn::ImportValue: !Sub ${LZStackPrefix}-service-template-bucket
            - Sid: SSMAccessPolicy
              Effect: Allow
              Action:
                - 'ssm:GetParameters'
              Resource:
              - !Sub
                - 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${AnchoreDBSSM}'
                - AnchoreDBSSM:
                    Fn::ImportValue: !Sub ${LZStackPrefix}-PasswordParameterStoreName
        -
          PolicyName: CodeBuildVPCAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeDhcpOptions
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
              - ec2:DescribeSubnets
              - ec2:DescribeSecurityGroups
              - ec2:DescribeVpcs
              Resource: "*"
            - Effect: Allow
              Action:
              - ec2:CreateNetworkInterfacePermission
              Resource: !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*"
              Condition:
                StringEquals:
                  ec2:Subnet:
                  - !Sub
                    - "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PrivateSubnet0}"
                    - PrivateSubnet0:
                        Fn::ImportValue: !Sub ${LZStackPrefix}-Private-Subnet-0
                  - !Sub
                    - "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PrivateSubnet1}"
                    - PrivateSubnet1:
                        Fn::ImportValue: !Sub ${LZStackPrefix}-Private-Subnet-1
                  ec2:AuthorizedService: codebuild.amazonaws.com

  BuildIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: 'codebuild.amazonaws.com'
      Path: /
      Policies:
        -
          PolicyName: CodeBuildGetTemplatesPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Sid: AccessTemplateBucket
                Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub
                    - 'arn:aws:s3:::${TEMPLATES_BUCKET}/*'
                    -
                      TEMPLATES_BUCKET:
                        Fn::ImportValue: !Sub ${LZStackPrefix}-service-template-bucket
      ManagedPolicyArns:
        - !Ref CodeBuildStandardPolicy
        - !Ref UserTaskIamPolicy # In case we need to pull from S3 to get an artifact stored there in the custom build step

  CodeBuildStandardPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${Repository}
            Effect: Allow
            Action:
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:BatchCheckLayerAvailability
              - ecr:PutImage
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
          -
            Sid: AccessToCloudWatchLogs
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - ecr:GetAuthorizationToken
            Resource:
              - '*'
          -
            Sid: AccessArtifactStore
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:GetObjectVersion
            Resource:
              - !Sub
                - 'arn:aws:s3:::${ARTIFACTS_BUCKET}/*'
                -
                  ARTIFACTS_BUCKET:
                    Fn::ImportValue: !Sub ${LZStackPrefix}-service-artifact-bucket

  UserTaskIamPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Sid: AccessUserSpecificBucketPath
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:PutObjectAcl
              - s3:GetObjectVersion
            Resource:
              - !Sub
                - 'arn:aws:s3:::${RESOURCES_BUCKET}/service/${SERVICE_NAME}/*'
                -
                  RESOURCES_BUCKET:
                    Fn::ImportValue: !Sub ${LZStackPrefix}-service-resource-bucket
                  SERVICE_NAME: !Ref ServiceName
          -
            Sid: ListBucket
            Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              - !Sub
                - 'arn:aws:s3:::${RESOURCES_BUCKET}/*'
                - RESOURCES_BUCKET:
                    Fn::ImportValue: !Sub ${LZStackPrefix}-service-resource-bucket
              - !Sub
                - 'arn:aws:s3:::${RESOURCES_BUCKET}'
                - RESOURCES_BUCKET:
                    Fn::ImportValue: !Sub ${LZStackPrefix}-service-resource-bucket

  Repository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${ServiceName}
  CustomBuildProject:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Description: !Sub 'Checkout code from ${GitHubUser}/${GitRepo} and run ./buildspec.yml'
      Name: !Sub custom-build-${ServiceName}-container
      ServiceRole: !Ref CustomBuildIamRole
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/docker:17.09.0"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}
          - Name: RESOURCE_BUCKET
            Value:
              Fn::ImportValue: !Sub ${LZStackPrefix}-service-resource-bucket
          - Name: RESOURCE_BUCKET_PATH
            Value: !Sub /service/${ServiceName}/
  BuildProject:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Description: !Sub 'Checkout code from ${GitHubUser}/${GitRepo} and push to ECR at ${Repository}'
      Name: !Sub build-${ServiceName}-container
      ServiceRole: !Ref BuildIamRole
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - $(aws ecr get-login --no-include-email)
                - TAG="$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
            build:
              commands:
                - docker build --tag "${REPOSITORY_URI}:${TAG}" .
            post_build:
              commands:
                - docker push "${REPOSITORY_URI}:${TAG}"
                - printf '{"tag":"%s"}' $TAG > build.json
                - aws s3 cp  s3://${TEMPLATE_BUCKET}/admin/ecs-workshop-service/cf-templates/common/microservice.yml .
          artifacts:
            files:
              - build.json
              - microservice.yml
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/docker:17.09.0"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}
          - Name: TEMPLATE_BUCKET
            Value:
              Fn::ImportValue: !Sub ${LZStackPrefix}-service-template-bucket
  CustomTestProject:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Description: !Sub '$Checkout container from ${Repository} and run any custom tests'
      Name: !Sub custom-test-${ServiceName}-container
      ServiceRole: !Ref BuildIamRole
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: testspec.yml
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/docker:17.09.0"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}
          - Name: RESOURCE_BUCKET
            Value:
              Fn::ImportValue: !Sub ${LZStackPrefix}-service-resource-bucket
          - Name: RESOURCE_BUCKET_PATH
            Value: !Sub /service/${ServiceName}/
          - Name: BUILD_JSON
            Value: build.json
  TestProject:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Description: !Sub '$Checkout container from ${Repository} and check response on port 80'
      Name: !Sub test-${ServiceName}-container
      ServiceRole: !Ref BuildIamRole
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - $(aws ecr get-login --no-include-email)
                - export TAG=`cat ${BUILD_JSON} | sed -e 's/{"tag":"\(.*\)"}/\1/g'`
                - echo Testing $REPOSITORY_NAME:$TAG
                - docker pull ${REPOSITORY_URI}:${TAG}
            build:
              commands:
                - docker run -d --name test-container  ${REPOSITORY_URI}:${TAG}
                - export CONTAINER_IP=`docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' test-container`
                - export STATUS_CODE=`curl -I http://$CONTAINER_IP:80/ 2>/dev/null | head -n 1|cut -d ' ' -f2`
                - echo "Got ${STATUS_CODE} from ${CONTAINER_IP}"
                - '[ "$STATUS_CODE" -eq "200" ]'
            post_build:
              commands:
                - docker kill test-container
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/docker:17.09.0"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}
          - Name: REPOSITORY_NAME
            Value: !Sub ${Repository}
          - Name: BUILD_JSON
            Value: build.json

  AnchoreatestSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group associated with the codebuild to access db"
      VpcId:
        Fn::ImportValue: !Sub ${LZStackPrefix}-VpcId

  AnchoreTestProject:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Description: !Sub '$Checkout container from ${Repository} and check anchore gate'
      Name: !Sub anchore-test-${ServiceName}-container
      ServiceRole: !GetAtt AnchoreTestIAMRole.Arn
      TimeoutInMinutes: 300
      VpcConfig:
        VpcId:
          Fn::ImportValue: !Sub ${LZStackPrefix}-VpcId
        Subnets:
        - Fn::ImportValue: !Sub ${LZStackPrefix}-Private-Subnet-0
        - Fn::ImportValue: !Sub ${LZStackPrefix}-Private-Subnet-1
        SecurityGroupIds:
        - !Ref AnchoreatestSg

      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - pip install --upgrade boto3 awscli anchorecli
                - yum -y update && yum -y install epel-release && yum -y install gettext
                - mkdir -p /config
                - aws s3 cp  s3://${TEMPLATE_BUCKET}/cf-templates/deploy-with-security/config.template.yaml .
                - yum -y install jq


            build:
              commands:
                - PATH=/usr/local/bin:$PATH
                - export TAG=`cat ${BUILD_JSON} | sed -e 's/{"tag":"\(.*\)"}/\1/g'`
                - echo Testing $REPOSITORY_NAME:$TAG
                - echo $AWS_DEFAULT_REGION $PASSWORD_PARAM_STORE
                - export DB_PASSWORD=$(aws --region $AWS_DEFAULT_REGION ssm get-parameters --name $PASSWORD_PARAM_STORE --with-decryption --output text |  cut -f 4)
                - envsubst < "config.template.yaml" > "/config/config.yaml"
                - /usr/bin/anchore-engine > /var/log/anchore.out 2>&1 &
                - sleep 30
                - echo $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com
                - echo $REPOSITORY_URI:$TAG
                - sleep 30
                - anchore-cli --u admin --p foobar registry del $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
                - anchore-cli --u admin --p foobar registry add $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com awsauto awsauto --registry-type=awsecr
                - anchore-cli --u admin --p foobar registry list
                - anchore-cli --u admin --p foobar image add $REPOSITORY_URI:$TAG
                - until anchore-cli --u admin --p foobar evaluate check ${REPOSITORY_URI}:${TAG}|grep "Status:";do echo "Checking again"; tail -n 300 /var/log/anchore.out; sleep 10; done;
                - result=$(anchore-cli --u admin --p foobar evaluate check ${REPOSITORY_URI}:${TAG}|grep Status)
                - echo $result
                - test_result=`echo $result | cut -d " " -f 2`
                - if [ "$test_result" = 'pass' ];then echo "Anchore Scan Passed";else echo "Anchore Scan Failed";exit 1;fi

            post_build:
              commands:
                - echo Anchore completed at `date`

      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "anchore/anchore-engine:latest"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}
          - Name: REPOSITORY_NAME
            Value: !Sub ${Repository}
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: BUILD_JSON
            Value: build.json
          - Name: DB_USERNAME
            Value:
              Fn::ImportValue: !Sub ${LZStackPrefix}-DB-Username
          - Name: PASSWORD_PARAM_STORE
            Value:
              Fn::ImportValue: !Sub ${LZStackPrefix}-PasswordParameterStoreName
          - Name: DB_HOST
            Value:
              Fn::ImportValue: !Sub ${LZStackPrefix}-DB-Endpoint
          - Name: DB_PORT
            Value:
              Fn::ImportValue: !Sub ${LZStackPrefix}-DB-Port
          - Name: DB_NAME
            Value:
              Fn::ImportValue: !Sub ${LZStackPrefix}-DB-Name
          - Name: TEMPLATE_BUCKET
            Value:
              Fn::ImportValue: !Sub ${LZStackPrefix}-service-template-bucket

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${LZStackPrefix}-${ServiceName}-pipeline
      RestartExecutionOnUpdate: true
      ArtifactStore:
        Location:
          Fn::ImportValue: !Sub ${LZStackPrefix}-service-artifact-bucket
        Type: 'S3'
      RoleArn: !GetAtt PipelineIamRole.Arn
      Stages:
        -
          Name: Source
          Actions:
            -
              Name: AppRepoSource
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitRepo
                Branch: !Ref GitBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: GitHubArtifact
              RunOrder: '1'
        -
          Name: Build
          Actions:
            -
              Name: CustomCodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Sub custom-build-${ServiceName}-container
              InputArtifacts: [Name: 'GitHubArtifact']
              RunOrder: 1
            -
              Name: ContainerBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Sub build-${ServiceName}-container
              InputArtifacts: [Name: 'GitHubArtifact']
              OutputArtifacts: [Name: 'BuildOutput']
              RunOrder: 3
        -
          Name: Test
          Actions:
            -
              Name: CustomCodeTest
              ActionTypeId:
                Category: Test
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Sub custom-test-${ServiceName}-container
              InputArtifacts: [Name: 'GitHubArtifact']
              RunOrder: 1
            -
              Name: ContainerTest
              ActionTypeId:
                Category: Test
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Sub test-${ServiceName}-container
              InputArtifacts: [Name: 'BuildOutput']
              RunOrder: 1
            -
              Name: AnchoreTest
              ActionTypeId:
                Category: Test
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Sub anchore-test-${ServiceName}-container
              InputArtifacts: [Name: 'BuildOutput']
              RunOrder: 1
        -
          Name: ServiceDeploy
          Actions:
            -
              Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ChangeSetName: !Sub Deploy-${ServiceName}-Vanilla-On-${LZStackPrefix}
                ActionMode: CREATE_UPDATE
                RoleArn:
                  Fn::ImportValue: !Sub ${LZStackPrefix}-cloudformation-role-arn
                StackName: !Sub w-deploy-${ServiceName}
                Capabilities: CAPABILITY_NAMED_IAM
                TemplatePath:  BuildOutput::microservice.yml
                RoleArn:
                  Fn::ImportValue: !Sub ${LZStackPrefix}-cloudformation-role-arn
                ParameterOverrides: !Sub |
                  {
                    "ContainerRepository": "${ServiceName}",
                    "ContainerName": "${ServiceName}",
                    "ContainerTag": { "Fn::GetParam" : [ "BuildOutput", "build.json", "tag" ] },
                    "DesiredCount": "2",
                    "ListenerPriority": "${ListenerPriority}",
                    "ListenerPath": "${ListenerPath}",
                    "LZStackPrefix": "${LZStackPrefix}",
                    "TaskIamRoleArn": "${UserTaskIamRole.Arn}"
                  }
              InputArtifacts: [Name: 'BuildOutput']
